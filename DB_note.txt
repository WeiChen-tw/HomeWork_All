//不等於<>
//字串要加''
//Binary 區分大小寫
//DISTINCT 記錄內容完全相同,只留一筆
//Where 欄位 LIKE "%內容" 樣式對比
//Where 欄位 IN (內容,內容) 列舉
//Where 欄位 IS NULL 
//Order 欄位 DESC 大到小 預設ASC 小到大
//`內容` 可以表示特殊字元欄位 n92
//Select 欄位 AS 新名稱 變更欄位名稱
//Select ISNULL(欄位,NULL的新名稱) as 非NULL名稱
//Concat ('內容','內容') 串接字串
//Convert(內容,型態)    型態轉型
//Count 回傳數量
//Limit 僅傳回結果集的前 N 筆記錄 n92 Update, Delete 亦有 LIMIT 子句
//彙總函數
//AVG,COUNT(有資料的共有幾筆),COUNT (*)(有Null值的記錄也算進去),MAX,MIN,SUM,STDEV,VAR
//GROUP BY 欄位 依欄位分組
//HAVING 針對GROUP條件過濾
//WITH ROLLUP 計算小計總計
//INNER JOIN 找兩表共通點  LEFT JOIN 左邊的表為主 RIGHT JOIN 右邊的表為主 
FROM  表1 as Table1 INNER JOIN 表2 as Table2
ON Table1.id = Table2.id;
//UNION 結合Select 刪除重複項目
//子查詢
SELECT CategoryID,productID,productName,unitprice,
				        (SELECT AVG(unitprice) FROM products WHERE CategoryID = o.CategoryID)as AvgPrice,
    unitprice - (SELECT AVG(unitprice) FROM products WHERE CategoryID = o.CategoryID)as DiffPrice
FROM products as o
ORDER BY CategoryID,ProductID
//INSERT 資料表 (欄位1,欄位2 ...) VALUES (內容1,內容2,...) //新增單筆資料(自動編號欄位以及計算型欄位不能指定欄位值)
//INSERT 資料表 (欄位1,欄位2 ...) SELECT (內容1,內容2,...) FROM 資料表2 //新增多筆資料
//DELETE FROM 資料表 WHERE 條件 刪除符合條件的資料
//TRUNCATE TABLE 刪除整份資料表內容 (資料表的內容全部清空，資料表的資料結構仍在)
//UPDATE 資料表 SET 欄位 = 新內容 WHERE 條件

//資料表 - 關聯圖
實體 Entities  ：一個資料表 -> 可以分成更多細項,有主體性(需求找名詞)
屬性 Attributes：欄位      -> 屬性依附在其他實體(需求找形容詞)
關聯性：需求找動詞
主體可以跟主體互動,屬性可能產生改變,但屬性無法與屬性互動
虛線：單生命週期掌握在多生命週期 -> 當多的消失 單也會消失
黑點：多
資料表特性
  一對多的時候多一個FK
  多對多的時候 增加交叉資料 多 N 個FK
(表1 + 表2 = 表3 有1個PK 2個FK(表1.PK & 表2.PK))

//正規化
第一正規化 - 兩個欄位不放同一種資料,一個欄位不能放兩種資料 只有一種意義
第二正規化 - 要有主鍵,欄位意義必須完全依附資料表意義,部分依附使用代號
第三正規化 - 沒有重複的鍵值
USE test; //選擇資料庫
DROP TABLE Lab;  //刪除資料表
DESCRIBE Lab;    //檢視資料表設定
CREATE TABLE Lab //建立資料表
(
  id INT AUTO_INCREMENT PRIMARY KEY,  //自動鍵值
  data INT NOT NULL                   //禁止空值
);
ALTER TABLE Lab CHANGE id stu_id INT; //改變欄位名稱

INSERT INTO Lab (data) VALUES (1);    //輸入資料
ALTER TABLE friends
  ADD email VARCHAR(30) DEFAULT 'someone@somewhere.com'; //新增欄位
ALTER TABLE friends
  MODIFY email VARCHAR(40); //修改欄位
//傳統模式 慢,嚴謹 set sql_mode = 'traditional'; 
//預設模式 快,鬆散 set sql_mode = ''; 

//多個鍵值
CREATE TABLE lab(
	id int not null,
    data int null,
    PRIMARY KEY(id)
)
//單一鍵值
CREATE TABLE lab(
	id int not null primary key,
    data int not null UNIQUE //不能重複值
)
//新增索引
CREATE INDEX 索引編號 ON 資料表(主排序欄位,副排序欄位,...)
//刪除
DROP INDEX 索引編號 ON 資料表
  犧牲空間換取時間
//限制 - 檢查限制
  ALTER TABLE 資料表  ADD CONSTRAINT 命名 check (欄位>=0)
//限制 - 唯一值限制
  ALTER TABLE 資料表  ADD CONSTRAINT 命名 UNIQUE (欄位)
//限制 - 主鍵限制
  ALTER TABLE 資料表  ADD CONSTRAINT 命名 PRIMARY KEY (欄位)
//限制 - 外來鍵限制(連鎖修改 或 先修改相關資料)
  ALTER TABLE 資料表1  
  ADD CONSTRAINT 命名 FOREIGN KEY (欄位) REFERENCES 資料表2 (欄位)
  ON UPDATE CASCADE //同步更新
  ON DELETE CASCADE //同步刪除

//查看資料表(欄位,主鍵,外鍵)
  SHOW CREATE TABLE 資料表


//取消限制
  ALTER TABLE lab  DROP CONSTRAINT 命名 

//以root進入MySql
  mysql-uroot 
//檢視系統選項
  show variables like 'data%'

//MyISAM
  - .FRM(結構檔)
  - .MYD(資料檔)
  - .MYI(索引檔)
  - 不支援Transaction,也沒有外鍵Constraint
  - 可唯獨壓縮
  - table-level鎖定
  - Merge
     聯合多個 MyISAM 的資料表，組合成一個邏輯資 料表。
     Merge 型的資料表，在資料庫資料夾會有 .FRM 、.MRG 檔案。
     實際上的資料放在各個 MyISAM 的資料表。
//InnoDB
  - .FRM(結構檔)
  - 支援Transaction Atomic(原子性)/Consistent(一致性）/Isolated(隔離性)/Durable(持續性）
  - 支援外鍵Constraint
  - 自動資料修復
  - row-level鎖定


//新增使用者
  create user 使用者名稱 identified by 'Pa$$w0rd';
//授予使用者權限
  grant 權限 on 資料表.* to 使用者名稱;
//重設使用者密碼
  set password for 使用者名稱 = password('Pa$$w0rd');

flush privileges;

CREATE USER 'my_user'@'localhost' IDENTIFIED BY 'my_password';
set password for carl = password('Pa$$w0rd');
autocommit ON/OFF
//交易異動特性
  1.Atomicity (原子性、不可分割)：交易內的 SQL 指令，不管在任何情況，都只能是全部執行完成，或全部不執行。若是發生無法全部執行完成的狀況，則會回滾(rollback)到完全沒執行時的狀態。
  2.Consistency (一致性)：交易完成後，必須維持資料的完整性。所有資料必須符合預設的驗證規則、外鍵限制...等。
  3.Isolation (隔離性)：多個交易可以獨立、同時執行，不會互相干擾。這一點跟後面會提到的「隔離層級」有關。
  4.Durability (持久性)：交易完成後，異動結果須完整的保留。
//開始
  start transaction;
//回復
  rollback;
//
  SELECT ... FROM ... LOCK IN SHARE MODE  等commit
  SELECT ... FROM ... FOR UPDATE          無法用LOCK IN SHARE MODE讀取
//設定交易層級
  SET SESSION TRANSACTION ISOLATION LEVEL 層級名稱
  -層級名稱
    READ UNCOMMITTED
    READ COMMITTED：此層級會考慮其他交易的執行結果
    *REPEATABLE READ：此為 innodb 預設的隔離層級。此隔離層級
                    ，不會考慮其他交易的修改。同一交易內，除非自己修改
                    ，否則重覆 SELECT 的結果一定相同
    SERIALIZABLE：跟 REPEATABLE READ 類似，
                  但是將所有的 SELECT 指令都隱含轉換為  
                  SELECT ... LOCK IN SHARE MODE
//備份
mysqldump -uroot --databases db0806 

select categoryId, categoryName into outfile 'c:\\temp\\lab.txt' from categories;

select categoryId, categoryName 
  replace or ignore   //置換或跳過
  into outfile 'c:\\temp\\lab.txt' 
  fields terminated by ',' optionally enclosed by '"'
  lines terminated by '\r\n'
  from categories;
  -- ignore 2 lines;  //跳過幾行
//homework
CY公司訂便當 訂便當流程
一個資料庫

/* 010 
  確定打開的是 Northwind 資料庫 */
use Northwind;

/* 110 
  請寫一道 Query 列出:
  products table 中的所有產品資料
 */ 

select * from products


/* 120 
  請寫一道 Query 列出:
  products table 所有產品, 條列資料時, 
  請列出以下欄位
  ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
 */ 

select ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
  from products


/* 130 
  請寫一道 Query 列出:
  products table 庫存量低於再訂購量的產品資料, 條列資料時, 
  請列出以下欄位
  ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
 */ 


select ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
  from products
  where UnitsInStock < ReorderLevel


/* 140 
  請寫一道 Query 列出:
  products table (庫存量 + 訂購中數量)低於再訂購量的產品資料, 條列資料時, 
  請列出以下欄位
  ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
 */ 

select ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
  from products
  where (UnitsInStock + UnitsOnOrder) < ReorderLevel


/* 150 
  請寫一道 Query 列出:
  products table 庫存量低於再訂購量的產品資料, 條列資料時, 
  請列出以下欄位
  SupplierID, ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
  並且, 相同供應商代號(SupplierID)的產品請排在一起
 */ 

select SupplierID, ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
  from products
  where UnitsInStock < ReorderLevel
  order by SupplierID


/* 160 
  請寫一道 Query 列出:
  products table 產品名稱以 c 開頭的資料
 */ 

select *
  from products
  where ProductName Like 'c%'


/* 170 
  請寫一道 Query 列出:
  products table 類別編號(CategoryID)為 1, 4, 8 的產品資料
  排序時, 請按"類別編號"排序, 相同類別編號的產品按產品名稱(ProductName)排列
 */ 

select *
  from products
  where CategoryID in (1, 4, 8)
  order by CategoryID, ProductName


/* 180 
  請寫一道 Query 列出:
  products table 單價介於 10 到 20 元之間(包含 10, 20)的產品資料
  並且按照單價(UnitPrice)由大到小排序
 */ 

select *
  from products
  where UnitPrice between 10 and 20
  order by UnitPrice desc

/* 190
  請寫一道 Query 列出: 傳真電話(fax)是「空白」的供應商(suppliers)公司名稱
*/

SELECT companyname, fax
  FROM suppliers
  WHERE fax IS NULL;


/* 210 
  請寫一道 Query 列出:
  products table 所有產品, 條列資料時, 
  請列出以下欄位
  ProductID, ProductName, UnitPrice, 不過, 各欄位名稱請用中文顯示
  產品編號, 產品名稱, 單價
 */ 

select ProductID as `產品編號`, ProductName as `產品名稱`, UnitPrice as `單價`, 
  (UnitPrice * UnitsInStock) as StockCost
  from products


/* 220 
  請查 suppliers 資料表, 供應商來自哪些國家? (相同的國名, 只列一筆即可)
 */ 

SELECT DISTINCT country
 FROM suppliers
 ORDER BY country;


/* 220 
  請列出 UnitPrice 最貴的前三項產品 (products)
 */ 

select productID, ProductName, UnitPrice 
  from products
  order by UnitPrice DESC
  limit 3;

/* 230 
  為什麼下列的指令傳回空集合?
 */ 

select *
  from products
  where ProductName Like binary 'c%'

/* 310
  按照員工資料表(employees)的內容, 請查出一共有幾位員工?
 */
SELECT COUNT(*) FROM employees


/* 320
  按照員工資料表(employees)的內容, ReportsTo有資料的記錄一共幾筆?
 */
SELECT COUNT(reportsto) FROM employees

/* 330
  下列的指令, 請問錯了嗎?
 */

select categoryID, productID, AVG(UnitPrice)
  from products
  group by categoryID


/* 340
  categoryID 是產品類別的代號, 請統計各類產品(products)的庫存成本?
  庫存成本請直接以: 庫存量 * 牌價 (UnitsInStock * UnitPrice) 計算即可.
 */

select categoryID, Sum(UnitsInStock * UnitPrice)
  from products
  group by categoryID;

/* 350
  同上, 但庫存成本超過 12000 才要列出.
 */

select categoryID, Sum(UnitsInStock * UnitPrice)
  from products
  group by categoryID
  having Sum(UnitsInStock * UnitPrice) > 12000

/* 360
  請從 order details 統計各項產品銷售總和, 並且一併列出
  該產品的銷售明細.
 */

SELECT productid, orderid, SUM(quantity) AS total_quantity
 FROM `order details`
 GROUP BY productid, orderid
 WITH ROLLUP

/* 410
  請寫一道 Query 列出 products 資料表的以下欄位
  ProductID, ProductName, SupplierID
 */ 

select ProductID, ProductName, SupplierID from products


/* 420
   同上, 但請一併列出該供應商名稱(CompanyName)、
   聯絡電話(Phone)、聯絡人(ContactName)好嗎?
   另外, 相同供應商的資料請列在一起
 */ 
select ProductID, ProductName as PN, p.SupplierID, CompanyName, Phone, ContactName 
  from products p join suppliers s
  on p.SupplierID = s.SupplierID
  order by p.SupplierID


/* 430
   我想列出「所有」供應商目前各自提供我們哪些產品資料的對照表,
   目前沒提供我們產品的供應商也要列出

   <note>
   下指令前, 請先執行下列指令:
   -- begin --
   insert into suppliers
     (supplierID, CompanyName, ContactName, Phone)
      values
     (30, 'Taiwan First', 'A-Ban', '(001) 000-0001')
   -- end --
 */ 

select s.SupplierID, CompanyName, ProductID, ProductName 
  from suppliers s left join products p
  on s.SupplierID = p.SupplierID
  order by s.SupplierID



/* 510
  請列出「有買 23 號產品, 而且買超過 20 個」的訂單。
 */ 
select orderid, customerid from orders 
  where orderid in 
  (select orderid from `order details` 
    where productid = 23 and quantity > 20)
--
USE northwind;
SELECT orderid, customerid
 FROM orders AS or1
 WHERE 20 < (SELECT quantity FROM `order details` AS od WHERE od.orderid = or1.orderid AND od.productid = 23);
內部查詢以傳入值進行資料查詢
  內部查詢傳回結果到外部查詢
  針對外部查詢的每一筆都重複1~3 的步驟
  

--
select o.orderid, customerid ,od.productid,od.quantity
from orders as o INNER JOIN `order details` as od
ON o.OrderID = od.OrderID
where o.orderid in   (select od.orderid from `order details` where od.productid = 23 and od.quantity > 20)

/* 520
  請列出目前資料庫最後一天有經手訂單處理的員工清單。
*/
select EmployeeID, FirstName, LastName from Employees
  where EmployeeID in 
  (
    select EmployeeID from Orders
      where OrderDate = (select Max(OrderDate) from Orders)
  )


/* 530
  請列出各項產品的類別、編號、品名、單價、該類產品平均單價、
  單價與產品平均單價的「價差」。
 */ 
select CategoryID, ProductID, UnitPrice, 
  (select Avg(UnitPrice) from products as i where CategoryID = o.CategoryID) as AvgPrice,
  UnitPrice - (select Avg(UnitPrice) from products as I where CategoryID = o.CategoryID) as DiffPrice
  from products as o
  order by CategoryID, ProductID

